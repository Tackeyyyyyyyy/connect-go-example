package main

import (
	"context"
	"log"
	"net/http"
	"strconv"
	"time"

	"github.com/bufbuild/connect-go"
	"github.com/rs/cors"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	greetv1 "example/gen/greet/v1"        // generated by protoc-gen-go
	"example/gen/greet/v1/greetv1connect" // generated by protoc-gen-connect-go
)


type GreetServer struct{}

func (s *GreetServer) Greet(ctx context.Context, req *connect.Request[greetv1.GreetRequest], res *connect.ServerStream[greetv1.GreetResponse]) error {
	resCount := 10

	log.Println("Request headers: ", req.Header())

	log.Println("Request value: ", req.Msg)

	for i := 0; i < resCount; i++ {
		hoge := &greetv1.GreetResponse{Greeting: "hello count : " + strconv.Itoa(i)}
		if err := res.Send(hoge); err != nil {
			return err
		}
		time.Sleep(time.Second * 1)
	}

	return nil
}

func main() {
	greeter := &GreetServer{}
	mux := http.NewServeMux()
	path, handler := greetv1connect.NewGreetServiceHandler(greeter)
	mux.Handle(path, handler)
	corsHandler := cors.AllowAll().Handler(h2c.NewHandler(mux, &http2.Server{}))
	log.Println("run serve")
	err := http.ListenAndServe(
		"localhost:8080",
		corsHandler,
	)
	if err != nil {
		return 
	}
}